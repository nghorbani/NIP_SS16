clc; close all; clear all;
%% initializing variables
time = 0:0.1:1;%sec
lam0 = 10; % Hz
w = 2*pi;% rad/sec
epsilons = [0.0,0.1,1.0];
Lamt = @(t,epsilon) lam0*(1+epsilon*sin(w*t));
Mut = @(t,epsilon) lam0*(t-(epsilon/w)*cos(w*t)+epsilon/w);%integral of Lamt

%% 1.a
epsilons = [0.0,0.1,1.0];
figure(100);
for figIdx = 1:3
    epsilon = epsilons(figIdx);
    subplot(310+figIdx); plot(time, arrayfun(@(t) Mut(t, epsilon), time));
    title(sprintf('\\epsilon = %2.1f',epsilon))
    ylabel('\mu(t)');
end
xlabel('t - sec')
%% 1.b
figure(101);
spikeTrains = cell(numel(epsilons),1);
for figIdx = 1:3
    epsilon = epsilons(figIdx);

    spikeTimes = genSpikes(@(t) Lamt(t,epsilon),1);
    spikeTimes = spikeTimes{1};
    Lt = countFun(spikeTimes, spikeTimes);
    spikeTrains{figIdx} = spikeTimes; % for next task
    subplot(310+figIdx);hold on;
    title(sprintf('\\epsilon = %2.1f',epsilon));
    line([spikeTimes;spikeTimes],[0;5]*ones(size(spikeTimes)),'Color','k');
    stairs([0,spikeTimes,1],[0,Lt,Lt(end)],'b');
    xlim([0,1]);
end
xlabel('t - sec')
%% 1.c,d
epsilons = [0.0,0.1];
numEps = numel(epsilons);
numTrains = 1000;
epsi_prior = 1/numEps;%uniform prior

display('###### Task 2.c and d')
for epsilon = epsilons
    margins = zeros(numEps,1);
    display(sprintf('marginal probability for epsilon = %2.2f ',epsilon))
    for epsIdx = 1:numEps
        Lt = countFun(time, spikeTrains{epsIdx});
        margins(epsIdx) = computeCountMargin(time ,@(t) Mut(t,epsilon),Lt) * epsi_prior;
    end
    for epsIdx = 1:numEps
        margin = margins(epsIdx)/sum(margins);
        display(sprintf('\tfor train generated by espsilon = %2.2f P(t1,...,tm) = %e',epsilons(epsIdx),margin))
    end
end
%% 2.e
display('###### Task 2.e')
spikeTrains = cell(numEps,numTrains);
spikeTimes = genSpikes(@(t) Lamt(t,epsilon),1);

%generating 1000 spike trains for each epsilon
for epsIdx = 1:numEps
    epsilon = epsilons(epsIdx);
    spikeTrains(epsIdx,:)= genSpikes(@(t) Lamt(t,epsilon),numTrains);
end

for epsilon = epsilons
    display(sprintf('marginal probability for epsilon = %2.2f ',epsilon))
    margins = zeros(numEps,numTrains);
    for epsIdx = 1:numEps
        for trainIdx = 1:numTrains
            Lt = countFun(time, spikeTrains{epsIdx,trainIdx});
            margins(epsIdx,trainIdx) = computeCountMargin(time ,@(t) Mut(t,epsilon),Lt);
        end
    end
    margins = mean(margins,2);
    for epsIdx = 1:numEps
        margin = margins(epsIdx)/sum(margins);
        display(sprintf('\tfor train generated by espsilon = %2.2f P(t1,...,tm) = %e',epsilons(epsIdx),margin));
    end
end

%% 2.f
display('###### Task 2.f')
time = 0:0.01:1;
numTrains = 1000;
numEps = numel(epsilons);

for epsilon = epsilons
    display(sprintf('marginal probability for epsilon = %2.2f ',epsilon))
    margins = zeros(numEps,numTrains);
    for epsIdx = 1:numEps
        for trainIdx = 1:numTrains
            Lt = countFun(time, spikeTrains{epsIdx,trainIdx});
            margins(epsIdx,trainIdx) = computeCountMargin(time ,@(t) Mut(t,epsilon),Lt);
        end
    end
    margins = mean(margins,2);
    for epsIdx = 1:numEps
        margin = margins(epsIdx)/sum(margins);
        display(sprintf('\tfor train generated by espsilon = %2.2f P(t1,...,tm) = %e',epsilons(epsIdx),margin));
    end
end
%% 2.g
display('###### Task 2.g')
time = 0:0.1:1;

for epsilon = epsilons
    display(sprintf('marginal probability for epsilon = %2.2f ',epsilon))
    margins = zeros(numEps,numTrains);
    for epsIdx = 1:numEps
        for trainIdx = 1:numTrains
            margins(epsIdx,trainIdx) = computePoisLogLikelihood(spikeTrains{epsIdx,trainIdx},@(t) Mut(t,epsilon),@(t) Lamt(t,epsilon));
        end
    end
    margins = mean(margins,2);
    for epsIdx = 1:numEps
        margin = margins(epsIdx)/sum(margins);
        display(sprintf('\tfor train generated by espsilon = %2.2f P(t1,...,tm) = %e',epsilons(epsIdx),margin));
    end
end