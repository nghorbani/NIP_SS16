clc; close all; clear all;
%% initializing variables
time = 0:0.1:1;%sec
w = 2*pi;% rad/sec
Lamt = @(t,epsilon) 10*(1+epsilon*sin(w*t));
Mut = @(t,epsilon) 10*(t-(epsilon/w)*cos(w*t)+epsilon/w);%integral of Lamt

%% 1.a
epsilons = [0.0,0.1,1.0];
numEps = numel(epsilons);
figure(100);
for epsIdx = 1:numEps
    epsilon = epsilons(epsIdx);
    subplot(310+epsIdx); plot(time, arrayfun(@(t) Mut(t, epsilon), time));
    title(sprintf('\\epsilon = %2.1f',epsilon))
    ylabel('\mu(t)');
end
xlabel('t - sec')
%% 1.b
figure(101);
%generating 1 spike trains for each epsilon
spikeTrains = cell(numEps,1);
for epsIdx = 1:numEps
    epsilon = epsilons(epsIdx);
    spikeTrains(epsIdx,:)= genSpikes(@(t) Lamt(t,epsilon),1);
end

for epsIdx = 1:numEps
    epsilon = epsilons(epsIdx);
    spikeTimes = spikeTrains{epsIdx};%genSpikes(@(t) Lamt(t,epsilon),1);
    Lt = countFun(spikeTimes, spikeTimes);
    subplot(310+epsIdx);hold on;
    title(sprintf('\\epsilon = %2.1f',epsilon));
    line([spikeTimes;spikeTimes],[0;5]*ones(size(spikeTimes)),'Color','k');
    stairs([0,spikeTimes,1],[0,Lt,Lt(end)],'b');
    xlim([0,1]);
end
xlabel('t - sec')
%% 1.c,d
epsilons = [0.0,0.1];
numEps = numel(epsilons);
epsi_prior = 1/numEps;%uniform prior

display('###### Task 2.c and d')
for epsilon = epsilons
    posteriors = zeros(numEps,1);
    display(sprintf('marginal probability for epsilon = %2.2f',epsilon))
    for epsIdx = 1:numEps
        posteriors(epsIdx) = computeLikelihood(time, spikeTrains{epsIdx}, @(t) Mut(t,epsilon));% * epsi_prior;
    end
    for epsIdx = numEps:-1:1
        margin = posteriors(epsIdx);%/sum(posteriors);
        display(sprintf('\t%d - P(epsi = %2.2f|train) = %e',epsIdx,epsilons(epsIdx),margin))
    end
end
%% 2.e
display('###### Task 2.e')
numTrains = 1000;
spikeTrains = cell(numEps,numTrains);

%generating 1000 spike trains for each epsilon
for epsIdx = 1:numEps
    epsilon = epsilons(epsIdx);
    spikeTrains(epsIdx,:)= genSpikes(@(t) Lamt(t,epsilon),numTrains);
end

for epsilon = epsilons
    display(sprintf('mean marginal probability for epsilon = %2.2f',epsilon))
    posteriors = zeros(numEps,numTrains);
    for epsIdx = 1:numEps
        for trainIdx = 1:numTrains
            posteriors(epsIdx,trainIdx) = computeLikelihood(time, spikeTrains{epsIdx,trainIdx}, @(t) Mut(t,epsilon));% * epsi_prior;
        end
    end
    posteriors = mean(posteriors,2);
    for epsIdx = 1:numEps
        margin = posteriors(epsIdx);%/sum(posteriors);
        display(sprintf('\t%d - <P(epsi = %2.2f|train)> = %e',epsIdx,epsilons(epsIdx),margin))
    end
end

%% 2.f
display('###### Task 2.f')
time = 0:0.01:1;
numTrains = 1000;

for epsilon = epsilons
    display(sprintf('marginal probability for epsilon = %2.2f with finer grid sample points',epsilon))
    posteriors = zeros(numEps,numTrains);
    for epsIdx = 1:numEps
        for trainIdx = 1:numTrains
            posteriors(epsIdx,trainIdx) = computeLikelihood(time, spikeTrains{epsIdx,trainIdx}, @(t) Mut(t,epsilon));% * epsi_prior;
        end
    end
    posteriors = mean(posteriors,2);
    for epsIdx = 1:numEps
        margin = posteriors(epsIdx);%/sum(posteriors);
        display(sprintf('\t%d - <P(epsi = %2.2f|train)> = %e',epsIdx,epsilons(epsIdx),margin))
    end
end

%% 2.g
display('###### Task 2.g')
time = 0:0.1:1;

for epsilon = epsilons
    display(sprintf('Log Liklihood for epsilon = %2.2f',epsilon))
    for epsIdx = 1:numEps
        posteriors = zeros(1,numTrains);
        for trainIdx = 1:numTrains
            posteriors(trainIdx) = computePoisLogLikelihood(spikeTrains{epsIdx,trainIdx},@(t) Mut(t,epsilon),@(t) Lamt(t,epsilon));
        end
        display(sprintf('\tfor train generated by espsilon = %2.2f <logLike(train)> = %e',epsilons(epsIdx),mean(posteriors)));
    end
end
%% neurometric function
figure(300); hold on;
Ts = [1,5,10];
dLams = [1,5,10];
count = 0;
for T = Ts
    for dLam = dLams 
        t = 0:0.1:T;
        count = count + 1;
        y = 0.5 * exp(-t *dLam);
        plot(t,y);
    end
end
